global
    # authentication
    #lua-load /usr/local/etc/haproxy/sqrl.lua

    # certificates
    crt-base /etc/letsencrypt/live
    lua-load /usr/local/etc/haproxy/acme-http01-webroot.lua

    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-bind-ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH

defaults
    # TODO: don't run as root

    # make sure this is mounted from the host!
    log     /dev/log    local7

    # TODO: this was in the docs, but isn't gives an error
    # log-send-hostname   haproxy_letsencrypt

    mode    http
    option  httplog

    timeout connect     5000
    timeout client      50000
    timeout server      50000

    balance static-rr

resolvers dns
    nameserver docker-internal 127.0.0.11:53
    hold valid 10s

# TODO: tcp frontend that checks for ssh on 443
# TODO: tcp frontend that checks for ssh on 443 behind https certificate
# TODO: frontend to catch OpenVPN on 443
# TODO: frontend to catch OpenVPN on 443 behind https certificate?

frontend http_allapps
    bind :::80 v4v6

    # IMPORTANT! enable this once the first certificate is created
    # bind :::443 v4v6 ssl crt /etc/letsencrypt/live/haproxy/

    # send the real client IP to the backend
    option forwardfor

    # send the port/proto so the backend can make correct urls
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    # SSL magic
    acl url_acme_http01 path_beg /.well-known/acme-challenge/
    http-request use-service lua.acme-http01 if METH_GET url_acme_http01

    # IMPORTANT! enable this once the first certificate is created
    # WARNING! once enabled, all you
    # http-response set-header Strict-Transport-Security max-age=31536000;\ includeSubdomains;\ preload
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff

    # redirect http to https
    redirect scheme https code 301 if !{ ssl_fc }

    # Authentication magic
    #acl url_sqrl_http path_beg /sqrl
    #use_backend login if url_sqrl_http

    # TODO: set bk_default
    use_backend %[req.hdr(host),lower,map_dom(/usr/local/etc/haproxy/domain2backend.map,bk_default)]

backend haproxy_stats
    stats enable
    stats uri /haproxy

    # IMPORTANT! set this match to your network
    acl network_allowed src 10.11.12.0/24
    block if !network_allowed

    # TODO: put SQRL in front of this

    # TODO: secure credentials (salted?)
    stats auth haproxy:PUTASECUREPASSPHRASEHERE

backend example.com
    server server0 example-com:80
